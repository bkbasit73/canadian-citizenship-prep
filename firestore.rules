/**
 * @fileoverview Firestore Security Rules for the Canadian Citizenship Test Preparation App.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model:
 *   - Public Read Access: The `/questions` collection is publicly readable, allowing all users to access test questions.
 *   - User-Ownership: The `/users/{userId}/quiz_results` collection enforces strict user-ownership, ensuring only authenticated users can access their own quiz results.
 *
 * Data Structure:
 * - `/questions/{questionId}`: Stores the test questions, accessible to all users.
 * - `/users/{userId}/quiz_results/{quizResultId}`: Stores individual quiz results, accessible only to the user identified by `{userId}`.
 *
 * Key Security Decisions:
 * - Questions are publicly readable to facilitate easy access for all users.
 * - Quiz results are strictly user-owned, preventing unauthorized access to sensitive user data.
 * - No listing of user documents is allowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * - Authorization is path-based for `/users/{userId}/quiz_results/{quizResultId}`, eliminating the need for denormalized data or `get()` calls. The user ID in the path is directly compared to the authenticated user's UID.
 *
 * Structural Segregation:
 * - Questions and quiz results are stored in separate collections to optimize read access and enforce different security policies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read questions, but restricts writes.
     * @path /questions/{questionId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to questions while restricting write access.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces strict user-ownership for quiz results. Only the authenticated user can access their own quiz results.
     * @path /users/{userId}/quiz_results/{quizResultId}
     * @allow (create, get, list, update, delete) when the user is the owner.
     * @deny (create, get, list, update, delete) when the user is not the owner.
     * @principle Enforces document ownership based on the path.
     */
    match /users/{userId}/quiz_results/{quizResultId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // ---- Helper functions ----
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}